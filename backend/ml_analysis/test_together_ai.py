import os
import django
import json
import sys
from pathlib import Path

# --- INICIO: A√±adir el root del proyecto al sys.path ---
# Esto asegura que Django pueda encontrar el m√≥dulo 'backend.settings'
# El script est√° en backend/ml_analysis/, as√≠ que subimos dos niveles para llegar a la ra√≠z del proyecto Django.
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(PROJECT_ROOT))
# --- FIN: A√±adir el root del proyecto al sys.path ---


# Configurar el entorno de Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from ml_analysis.ml_service import ml_service
from decouple import config

def test_llm_integration():
    """
    Prueba la integraci√≥n completa con el LLM (Together AI) a trav√©s del ml_service.
    """
    print("==================================================")
    print("üîç INICIANDO PRUEBA DE INTEGRACI√ìN CON LLM (Together AI)")
    print("==================================================")

    # Verificar que la clave de API est√° presente
    api_key = config('TOGETHER_API_KEY', default=None)
    if not api_key or 'your_together_api_key_here' in api_key:
        print("‚ùå ERROR: La variable de entorno TOGETHER_API_KEY no est√° configurada o sigue con el valor por defecto.")
        print("   Por favor, crea un archivo 'backend/.env' y a√±ade tu clave.")
        return

    # --- Texto de contrato de ejemplo ---
    contract_text = """
    CONTRATO DE ALQUILER
    
    PRIMERO: El Propietario, Juan P√©rez, alquila a la Inquilina, Mar√≠a G√≥mez, el apartamento 3B del residencial Los Prados, Santo Domingo.
    
    SEGUNDO: El precio mensual del alquiler se fija en veinte mil pesos dominicanos (RD$20,000.00).
    
    TERCERO: La Inquilina se compromete a no tener mascotas de ning√∫n tipo. La violaci√≥n de esta cl√°usula dar√° derecho al Propietario a terminar el contrato y la inquilina deber√° pagar el doble del alquiler por cada mes que tuvo la mascota.
    
    CUARTO: Este contrato durar√° un a√±o y se renovar√° autom√°ticamente bajo las mismas condiciones, a menos que una de las partes notifique lo contrario con 30 d√≠as de antelaci√≥n.
    
    QUINTO: Esto no es una cl√°usula, es solo un texto de relleno para probar el extractor.
    """
    print(f"\nüìù Texto del contrato a analizar:\n---\n{contract_text[:200]}...\n---\n")

    try:
        # --- 1. Prueba de extracci√≥n de cl√°usulas ---
        print("\n--- PASO 1: Extrayendo cl√°usulas con _extract_clauses_with_llm ---")
        extracted_clauses = ml_service._extract_clauses_with_llm(contract_text)
        
        if not extracted_clauses:
            print("‚ùå FALLO: No se extrajeron cl√°usulas.")
            return
        
        print(f"‚úÖ √âXITO: Se extrajeron {len(extracted_clauses)} cl√°usulas.")
        for i, clause in enumerate(extracted_clauses):
            print(f"  Cl√°usula {i+1} ({clause.get('clause_number')}): {clause.get('text', '')[:60]}...")
        
        # --- 2. Prueba de validaci√≥n de una cl√°usula ---
        print("\n--- PASO 2: Validando una cl√°usula con _validate_clause_with_llm ---")
        clause_to_validate = next((c['text'] for c in extracted_clauses if 'pagar el doble' in c['text']), None)
        
        if not clause_to_validate:
            print("‚ö†Ô∏è ADVERTENCIA: No se encontr√≥ la cl√°usula de prueba para validar.")
        else:
            validation_result = ml_service._validate_clause_with_llm(clause_to_validate)
            print("‚úÖ √âXITO: La validaci√≥n se complet√≥.")
            print("   Resultado de la validaci√≥n:")
            print(json.dumps(validation_result, indent=2, ensure_ascii=False))

        # --- 3. Prueba de resumen y recomendaciones ---
        print("\n--- PASO 3: Generando resumen con _get_llm_summary ---")
        abusive_clauses_text = [c['text'] for c in extracted_clauses if 'pagar el doble' in c['text']]
        
        if not abusive_clauses_text:
            print("‚ö†Ô∏è ADVERTENCIA: No se encontraron cl√°usulas abusivas de prueba para generar resumen.")
        else:
            summary_result = ml_service._get_llm_summary(abusive_clauses_text)
            print("‚úÖ √âXITO: La generaci√≥n de resumen se complet√≥.")
            print("   Resultado del resumen:")
            print(json.dumps(summary_result, indent=2, ensure_ascii=False))

        print("\n==================================================")
        print("‚ú® PRUEBA DE INTEGRACI√ìN COMPLETADA ‚ú®")
        print("==================================================")

    except Exception as e:
        print("\n==================================================")
        print(f"‚ùå ERROR DURANTE LA PRUEBA: {e}")
        print("   Aseg√∫rate de que el modelo y la API de Together AI est√©n operativos.")
        print("==================================================")


if __name__ == "__main__":
    test_llm_integration() 