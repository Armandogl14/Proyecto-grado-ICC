#!/usr/bin/env python
"""
Test que toma el resumen ejecutivo b√°sico y lo enriquece con art√≠culos espec√≠ficos
del C√≥digo Civil usando el sistema RAG con LLM para mostrar el valor agregado.
"""

import os
import sys
import django
import json
import requests
from typing import List, Dict, Optional
from decouple import config
import logging

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from ml_analysis.ml_service import ContractMLService
from legal_knowledge.rag_service import rag_service
from legal_knowledge.models import LegalArticle
from django.db import models

logger = logging.getLogger(__name__)


class LLMBasedRAGService:
    """
    Servicio RAG que usa LLM para buscar y asociar art√≠culos espec√≠ficos
    """
    
    def __init__(self):
        self.api_key = config('TOGETHER_API_KEY')
        self.base_url = config('LLM_API_BASE_URL', default="https://api.together.xyz/v1/chat/completions")
        self.model_name = config('LLM_MODEL_NAME', default="meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo")
    
    def _call_llm_api(self, prompt: str, system_message: str) -> Dict:
        """Llamada al LLM"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": self.model_name,
            "messages": [
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.3,
            "max_tokens": 1024,
            "response_format": {"type": "json_object"}
        }

        try:
            print(f"üåê Consultando LLM: {self.model_name}")
            response = requests.post(self.base_url, headers=headers, json=data)
            response.raise_for_status()
            
            result = response.json()
            content = result['choices'][0]['message']['content']
            analysis = json.loads(content)
            return analysis

        except Exception as e:
            logger.error(f"Error en LLM API: {e}")
            return {}
    
    def search_articles_with_llm(self, query: str, tema_filter: str = None, max_results: int = 3) -> List[Dict]:
        """
        Usa LLM para buscar art√≠culos espec√≠ficos del C√≥digo Civil
        """
        print(f"üß† LLM buscando art√≠culos para: '{query}'")
        
        # Obtener lista de art√≠culos disponibles
        available_articles = []
        articles = LegalArticle.objects.filter(is_active=True)
        if tema_filter:
            articles = articles.filter(tema=tema_filter)
        
        for article in articles[:20]:  # Limitar para no saturar el prompt
            available_articles.append({
                'id': article.id,
                'numero': article.numero,
                'articulo': article.articulo,
                'contenido': article.contenido,
                'ley_asociada': article.ley_asociada,
                'tema': article.tema
            })
        
        # Crear prompt para el LLM
        articles_text = "\n".join([
            f"ID: {art['id']} | Art. {art['articulo']} ({art['ley_asociada']}) | {art['contenido']}"
            for art in available_articles
        ])
        
        prompt = f"""
        CONSULTA: "{query}"
        TEMA FILTRO: {tema_filter or 'todos'}
        
        ART√çCULOS DISPONIBLES:
        {articles_text}
        
        Analiza la consulta y selecciona los {max_results} art√≠culos M√ÅS RELEVANTES de la lista.
        
        Responde en formato JSON con la siguiente estructura:
        {{
            "selected_articles": [
                {{
                    "id": 123,
                    "articulo": "1708",
                    "ley_asociada": "Ley 4314",
                    "relevance_score": 0.95,
                    "justification": "Este art√≠culo es relevante porque..."
                }},
                ...
            ],
            "reasoning": "Explicaci√≥n general de por qu√© seleccionaste estos art√≠culos"
        }}
        
        Ordena por relevancia (score de 0.0 a 1.0) y proporciona justificaci√≥n clara.
        """
        
        system_message = """
        Eres un experto en derecho civil dominicano especializado en contratos de arrendamiento.
        Tu tarea es analizar consultas legales y seleccionar los art√≠culos del C√≥digo Civil m√°s relevantes.
        
        Criterios de selecci√≥n:
        1. Relevancia directa al problema planteado
        2. Aplicabilidad legal espec√≠fica
        3. Importancia en la jurisprudencia dominicana
        
        S√© preciso en tu selecci√≥n y proporciona scores realistas.
        """
        
        try:
            response = self._call_llm_api(prompt, system_message)
            
            if 'selected_articles' not in response:
                print("‚ö†Ô∏è LLM no retorn√≥ art√≠culos seleccionados")
                return []
            
            # Convertir respuesta LLM a formato compatible
            results = []
            for selected in response['selected_articles']:
                # Buscar el art√≠culo completo en la BD
                try:
                    article = LegalArticle.objects.get(id=selected['id'])
                    results.append({
                        'id': article.id,
                        'numero': article.numero,
                        'tema': article.tema,
                        'articulo': article.articulo,
                        'contenido': article.contenido,
                        'ley_asociada': article.ley_asociada,
                        'similarity_score': selected.get('relevance_score', 0.5),
                        'justification': selected.get('justification', ''),
                        'search_method': 'llm'
                    })
                except LegalArticle.DoesNotExist:
                    continue
            
            print(f"üß† LLM seleccion√≥ {len(results)} art√≠culos")
            print(f"üí≠ Razonamiento LLM: {response.get('reasoning', 'No proporcionado')}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå Error en b√∫squeda LLM: {e}")
            return []


class EnhancedExecutiveSummaryService:
    """
    Servicio que toma un resumen ejecutivo b√°sico y lo enriquece
    con aplicaciones espec√≠ficas de art√≠culos del C√≥digo Civil usando LLM
    """
    
    def __init__(self, use_llm=True):
        self.ml_service = ContractMLService()
        self.use_llm = use_llm
        
        if use_llm:
            self.rag_service = LLMBasedRAGService()
            print("üß† Usando LLM para b√∫squeda de art√≠culos")
        else:
            self.rag_service = rag_service
            print("ü§ñ Usando RAG local para b√∫squeda de art√≠culos")
    
    def enhance_executive_summary(self, contract_text: str, basic_summary: str, abusive_clauses: List[str]) -> Dict[str, str]:
        """
        Enriquece un resumen ejecutivo b√°sico con aplicaciones espec√≠ficas del C√≥digo Civil
        """
        print("üîç Iniciando enriquecimiento del resumen ejecutivo con RAG...")
        
        # 1. Detectar tipo de contrato y temas principales
        contract_type = self._detect_contract_themes(contract_text)
        print(f"üìã Temas detectados: {contract_type}")
        
        # 2. Buscar art√≠culos espec√≠ficos para los problemas identificados
        relevant_articles = self._find_relevant_articles(contract_text, abusive_clauses)
        print(f"üìö Art√≠culos relevantes encontrados: {len(relevant_articles)}")
        
        # 3. Aplicar art√≠culos espec√≠ficos a las cl√°usulas problem√°ticas
        article_applications = self._apply_articles_to_clauses(abusive_clauses, relevant_articles)
        
        # 4. Generar resumen ejecutivo enriquecido
        enhanced_summary = self._generate_enhanced_summary(
            basic_summary, 
            relevant_articles, 
            article_applications,
            contract_type
        )
        
        return {
            'basic_summary': basic_summary,
            'enhanced_summary': enhanced_summary,
            'applied_articles': article_applications,
            'legal_foundation': [art['articulo'] + ' - ' + art['ley_asociada'] for art in relevant_articles]
        }
    
    def _detect_contract_themes(self, contract_text: str) -> List[str]:
        """Detecta los temas principales del contrato"""
        themes = []
        
        # An√°lisis de palabras clave para temas
        text_lower = contract_text.lower()
        
        if any(word in text_lower for word in ['alquiler', 'arrendamiento', 'inquilino', 'propietaria']):
            themes.append('alquileres')
        
        if any(word in text_lower for word in ['venta', 'compra', 'vendedor', 'comprador']):
            themes.append('compraventa')
        
        if any(word in text_lower for word in ['contrato', 'obligaciones', 'derechos']):
            themes.append('contratos_generales')
        
        return themes if themes else ['contratos_generales']
    
    def _find_relevant_articles(self, contract_text: str, abusive_clauses: List[str]) -> List[Dict]:
        """Encuentra art√≠culos relevantes usando b√∫squedas espec√≠ficas"""
        all_articles = []
        
        # B√∫squedas espec√≠ficas basadas en contenido del contrato
        search_queries = [
            "obligaciones del arrendatario",
            "precio del arrendamiento", 
            "responsabilidades en contratos",
            "rescisi√≥n de contratos",
            "garant√≠as en arrendamiento"
        ]
        
        # B√∫squedas basadas en cl√°usulas abusivas
        for clause in abusive_clauses[:3]:  # Top 3 cl√°usulas problem√°ticas
            search_queries.append(clause[:100])  # Primeras 100 caracteres
        
        # Ejecutar b√∫squedas
        for query in search_queries:
            if self.use_llm:
                results = self.rag_service.search_articles_with_llm(query, tema_filter="alquileres", max_results=2)
            else:
                results = self.rag_service.search_articles(query, tema_filter="alquileres", max_results=2)
            all_articles.extend(results)
        
        # Eliminar duplicados manteniendo el orden por relevancia
        unique_articles = []
        seen_ids = set()
        
        for article in all_articles:
            if article['id'] not in seen_ids:
                unique_articles.append(article)
                seen_ids.add(article['id'])
        
        # Retornar los top 5 m√°s relevantes
        return sorted(unique_articles, key=lambda x: x['similarity_score'], reverse=True)[:5]
    
    def _apply_articles_to_clauses(self, abusive_clauses: List[str], articles: List[Dict]) -> List[Dict]:
        """Aplica art√≠culos espec√≠ficos a cl√°usulas problem√°ticas"""
        applications = []
        
        for i, clause in enumerate(abusive_clauses[:4]):  # Top 4 cl√°usulas
            # Buscar el art√≠culo m√°s relevante para esta cl√°usula espec√≠fica
            if self.use_llm:
                clause_articles = self.rag_service.search_articles_with_llm(clause, tema_filter="alquileres", max_results=1)
            else:
                clause_articles = self.rag_service.search_articles(clause, tema_filter="alquileres", max_results=1)
            
            if clause_articles:
                best_article = clause_articles[0]
                
                # Generar aplicaci√≥n espec√≠fica
                application = self._generate_article_application(clause, best_article)
                
                applications.append({
                    'clause_number': i + 1,
                    'clause_text': clause[:150] + "..." if len(clause) > 150 else clause,
                    'applicable_article': best_article['articulo'],
                    'law': best_article['ley_asociada'],
                    'article_content': best_article['contenido'],
                    'specific_application': application,
                    'similarity_score': best_article['similarity_score']
                })
        
        return applications
    
    def _generate_article_application(self, clause: str, article: Dict) -> str:
        """Genera una aplicaci√≥n espec√≠fica del art√≠culo a la cl√°usula"""
        
        # Mapeo de aplicaciones comunes basadas en el art√≠culo
        article_num = article['articulo']
        
        if '1708' in article_num:
            return f"Esta cl√°usula debe evaluarse conforme al Art. {article_num} que define las especies de contratos de arrendamiento y establece el marco general de derechos y obligaciones."
        
        elif '1709' in article_num or '1710' in article_num:
            return f"Seg√∫n el Art. {article_num}, las obligaciones entre arrendador y arrendatario deben ser equilibradas. Esta cl√°usula podr√≠a exceder las responsabilidades razonables del inquilino."
        
        elif '1711' in article_num:
            return f"El Art. {article_num} regula el precio del arrendamiento. Esta cl√°usula sobre aumentos debe ajustarse a los principios de proporcionalidad establecidos en la ley."
        
        elif '1728' in article_num:
            return f"El Art. {article_num} establece las obligaciones espec√≠ficas del arrendatario. Esta cl√°usula debe verificar que no imponga cargas desproporcionadas m√°s all√° de lo legalmente requerido."
        
        else:
            return f"Esta cl√°usula debe analizarse bajo los principios del Art. {article_num} de la {article['ley_asociada']} para asegurar su conformidad legal."
    
    def _generate_enhanced_summary(self, basic_summary: str, articles: List[Dict], 
                                 applications: List[Dict], themes: List[str]) -> str:
        """Genera un resumen ejecutivo enriquecido con referencias legales espec√≠ficas"""
        
        # Extraer informaci√≥n clave
        main_articles = [app['applicable_article'] for app in applications[:3]]
        main_laws = list(set([app['law'] for app in applications]))
        
        # Construir resumen enriquecido
        enhanced_parts = []
        
        # Introducci√≥n con contexto legal
        enhanced_parts.append(
            f"**AN√ÅLISIS LEGAL FUNDAMENTADO EN C√ìDIGO CIVIL DOMINICANO:**\n"
            f"El presente contrato de arrendamiento ha sido evaluado conforme a los art√≠culos "
            f"{', '.join(main_articles)} del C√≥digo Civil dominicano ({', '.join(main_laws)})."
        )
        
        # Resumen b√°sico mejorado
        enhanced_parts.append(f"\n**EVALUACI√ìN GENERAL:**\n{basic_summary}")
        
        # Aplicaciones espec√≠ficas de art√≠culos
        if applications:
            enhanced_parts.append("\n**APLICACIONES LEGALES ESPEC√çFICAS:**")
            
            for i, app in enumerate(applications[:3], 1):
                enhanced_parts.append(
                    f"\n{i}. **Cl√°usula Problem√°tica {app['clause_number']}:**\n"
                    f"   *Texto:* {app['clause_text']}\n"
                    f"   *Art√≠culo Aplicable:* {app['law']} Art. {app['applicable_article']}\n"
                    f"   *Aplicaci√≥n Legal:* {app['specific_application']}"
                )
        
        # Recomendaciones basadas en el an√°lisis legal
        enhanced_parts.append(
            "\n**RECOMENDACIONES LEGALES:**\n"
            "1. Revisar las cl√°usulas identificadas para asegurar conformidad con el C√≥digo Civil dominicano\n"
            "2. Considerar renegociar t√©rminos que excedan las obligaciones legales est√°ndar\n"
            "3. Verificar que el equilibrio contractual respete los principios del derecho civil dominicano\n"
            "4. Consultar con especialista en derecho inmobiliario para validaci√≥n final"
        )
        
        return "\n".join(enhanced_parts)


def test_contract_enhancement():
    """
    Test principal que compara resumen b√°sico vs enriquecido
    """
    print("üéØ TEST: ENRIQUECIMIENTO DE RESUMEN EJECUTIVO CON C√ìDIGO CIVIL")
    print("=" * 70)
    
    # Contrato de prueba (usando el problem√°tico del primer an√°lisis)
    test_contract = """
    CONTRATO DE ARRENDAMIENTO
    
    PRIMERO: LA PROPIETARIA alquila al INQUILINO un local comercial ubicado en 
    la Av. Abraham Lincoln No. 15, Santo Domingo. El local ser√° usado para 
    actividades comerciales, pero la propietaria se reserva el derecho de 
    cambiar su uso sin previo aviso.
    
    SEGUNDO: El INQUILINO acepta hacerse responsable de cualquier multa impuesta 
    por el incumplimiento de regulaciones que sean ajenas a su operaci√≥n, lo 
    que es un abuso contractual.
    
    TERCERO: El contrato se prorroga autom√°ticamente cada a√±o con un aumento 
    de 25% en el alquiler, sin opci√≥n de renegociaci√≥n.
    
    CUARTO: El inquilino debe asumir el pago de impuestos que legalmente 
    corresponden a la propietaria.
    
    QUINTO: En caso de cualquier disputa, La Propietaria tiene el derecho 
    exclusivo de elegir el juez o tribunal que resolver√° el conflicto, lo 
    cual viola los principios de imparcialidad.
    
    SEXTO: El dep√≥sito de RD$20,000.00 no podr√° ser utilizado para cubrir 
    alquileres pendientes ni ser√° devuelto si el inquilino decide no renovar.
    """
    
    print("üìÑ CONTRATO DE PRUEBA:")
    print("  ‚Ä¢ Tipo: Arrendamiento comercial")
    print("  ‚Ä¢ Cl√°usulas: 6 principales")
    print("  ‚Ä¢ Expectativa: M√∫ltiples problemas legales")
    print()
    
    # 1. An√°lisis b√°sico con ML
    print("ü§ñ PASO 1: AN√ÅLISIS ML B√ÅSICO")
    print("-" * 30)
    
    ml_service = ContractMLService()
    basic_analysis = ml_service.analyze_contract(test_contract)
    
    basic_summary = basic_analysis.get('legal_executive_summary', 'No se pudo generar resumen b√°sico')
    abusive_clauses = basic_analysis.get('extracted_clauses', [])
    
    print(f"üìã Resumen b√°sico generado:")
    print(f"   {basic_summary[:200]}...")
    print(f"üìä Cl√°usulas problem√°ticas detectadas: {len(abusive_clauses)}")
    
    # 2A. Enriquecimiento con RAG Local
    print(f"\nü§ñ PASO 2A: ENRIQUECIMIENTO CON RAG LOCAL")
    print("-" * 42)
    
    enhancer_local = EnhancedExecutiveSummaryService(use_llm=False)
    enhancement_local = enhancer_local.enhance_executive_summary(
        test_contract, 
        basic_summary, 
        abusive_clauses[:4]  # Top 4 cl√°usulas problem√°ticas
    )
    
    # 2B. Enriquecimiento con RAG + LLM
    print(f"\nüß† PASO 2B: ENRIQUECIMIENTO CON RAG + LLM")
    print("-" * 42)
    
    enhancer_llm = EnhancedExecutiveSummaryService(use_llm=True)
    enhancement_llm = enhancer_llm.enhance_executive_summary(
        test_contract, 
        basic_summary, 
        abusive_clauses[:4]  # Top 4 cl√°usulas problem√°ticas
    )
    
    # 3. Comparaci√≥n de resultados
    print(f"\nüìä PASO 3: COMPARACI√ìN DE RESULTADOS")
    print("-" * 40)
    
    print("üîπ RESUMEN B√ÅSICO (Solo ML):")
    print("-" * 25)
    print(enhancement_local['basic_summary'])
    
    print(f"\nü§ñ RESUMEN ENRIQUECIDO CON RAG LOCAL:")
    print("-" * 40)
    print(enhancement_local['enhanced_summary'])
    
    print(f"\nüß† RESUMEN ENRIQUECIDO CON LLM:")
    print("-" * 35)
    print(enhancement_llm['enhanced_summary'])
    
    # 4. Detalles de aplicaciones legales
    print(f"\nüìö PASO 4A: APLICACIONES LEGALES CON RAG LOCAL")
    print("-" * 50)
    
    applications_local = enhancement_local['applied_articles']
    
    for app in applications_local:
        print(f"\nü§ñ APLICACI√ìN LOCAL {app['clause_number']}:")
        print(f"  Art√≠culo: {app['law']} Art. {app['applicable_article']}")
        print(f"  Similitud: {app['similarity_score']:.3f}")
        print(f"  Cl√°usula: {app['clause_text']}")
        print(f"  Aplicaci√≥n: {app['specific_application']}")
    
    print(f"\nüìö PASO 4B: APLICACIONES LEGALES CON LLM")
    print("-" * 43)
    
    applications_llm = enhancement_llm['applied_articles']
    
    for app in applications_llm:
        print(f"\nüß† APLICACI√ìN LLM {app['clause_number']}:")
        print(f"  Art√≠culo: {app['law']} Art. {app['applicable_article']}")
        print(f"  Similitud: {app['similarity_score']:.3f}")
        print(f"  Cl√°usula: {app['clause_text']}")
        print(f"  Aplicaci√≥n: {app['specific_application']}")
        if 'justification' in app and app['justification']:
            print(f"  üí° Justificaci√≥n LLM: {app['justification'][:100]}...")
    
    # 5. M√©tricas de mejora comparativas
    print(f"\nüìà PASO 5: M√âTRICAS DE MEJORA COMPARATIVAS")
    print("-" * 45)
    
    basic_length = len(enhancement_local['basic_summary'])
    local_length = len(enhancement_local['enhanced_summary'])
    llm_length = len(enhancement_llm['enhanced_summary'])
    
    local_metrics = {
        'longitud_incremento': local_length - basic_length,
        'porcentaje_incremento': ((local_length / basic_length) - 1) * 100,
        'referencias_legales': len(enhancement_local['legal_foundation']),
        'aplicaciones_especificas': len(applications_local),
        'art√≠culos_citados': enhancement_local['legal_foundation']
    }
    
    llm_metrics = {
        'longitud_incremento': llm_length - basic_length,
        'porcentaje_incremento': ((llm_length / basic_length) - 1) * 100,
        'referencias_legales': len(enhancement_llm['legal_foundation']),
        'aplicaciones_especificas': len(applications_llm),
        'art√≠culos_citados': enhancement_llm['legal_foundation']
    }
    
    print(f"ü§ñ MEJORAS CON RAG LOCAL:")
    print(f"  ‚Ä¢ Incremento en longitud: +{local_metrics['longitud_incremento']} caracteres")
    print(f"  ‚Ä¢ Incremento porcentual: +{local_metrics['porcentaje_incremento']:.1f}%")
    print(f"  ‚Ä¢ Referencias legales: {local_metrics['referencias_legales']}")
    print(f"  ‚Ä¢ Aplicaciones espec√≠ficas: {local_metrics['aplicaciones_especificas']}")
    
    print(f"\nüß† MEJORAS CON LLM:")
    print(f"  ‚Ä¢ Incremento en longitud: +{llm_metrics['longitud_incremento']} caracteres")
    print(f"  ‚Ä¢ Incremento porcentual: +{llm_metrics['porcentaje_incremento']:.1f}%")
    print(f"  ‚Ä¢ Referencias legales: {llm_metrics['referencias_legales']}")
    print(f"  ‚Ä¢ Aplicaciones espec√≠ficas: {llm_metrics['aplicaciones_especificas']}")
    
    # Comparaci√≥n de art√≠culos encontrados
    local_articles = set([art.split(' - ')[0] for art in local_metrics['art√≠culos_citados']])
    llm_articles = set([art.split(' - ')[0] for art in llm_metrics['art√≠culos_citados']])
    
    common_articles = local_articles & llm_articles
    local_only = local_articles - llm_articles
    llm_only = llm_articles - local_articles
    
    print(f"\nüìä COMPARACI√ìN DE ART√çCULOS ENCONTRADOS:")
    print(f"  ü§ù En com√∫n: {list(common_articles) if common_articles else 'Ninguno'}")
    print(f"  ü§ñ Solo local: {list(local_only) if local_only else 'Ninguno'}")
    print(f"  üß† Solo LLM: {list(llm_only) if llm_only else 'Ninguno'}")
    
    print(f"\nüìã ART√çCULOS CITADOS POR RAG LOCAL:")
    for i, article in enumerate(local_metrics['art√≠culos_citados'], 1):
        print(f"  {i}. {article}")
    
    print(f"\nüìã ART√çCULOS CITADOS POR LLM:")
    for i, article in enumerate(llm_metrics['art√≠culos_citados'], 1):
        print(f"  {i}. {article}")
    
    # 6. Evaluaci√≥n cualitativa
    print(f"\nüéØ PASO 6: EVALUACI√ìN CUALITATIVA")
    print("-" * 35)
    
    print("‚úÖ VENTAJAS DEL RESUMEN ENRIQUECIDO:")
    advantages = [
        "Fundamentaci√≥n legal espec√≠fica en el C√≥digo Civil dominicano",
        "Aplicaci√≥n directa de art√≠culos a cl√°usulas problem√°ticas",
        "Mayor credibilidad y explicabilidad del an√°lisis",
        "Recomendaciones m√°s precisas y accionables",
        "Contexto legal que facilita toma de decisiones informadas"
    ]
    
    for advantage in advantages:
        print(f"  ‚Ä¢ {advantage}")
    
    return {
        'local_metrics': local_metrics,
        'llm_metrics': llm_metrics,
        'comparison': {
            'common_articles': list(common_articles),
            'local_only': list(local_only),
            'llm_only': list(llm_only),
            'similarity_score': len(common_articles) / max(len(local_articles), len(llm_articles), 1)
        }
    }


def run_comparison_test():
    """
    Ejecuta test comparativo con m√∫ltiples contratos
    """
    print(f"\nüîÑ TEST COMPARATIVO ADICIONAL")
    print("=" * 35)
    
    # Cl√°usulas espec√≠ficas para testear
    test_clauses = [
        "El inquilino ser√° responsable de cualquier cat√°strofe natural que afecte el inmueble",
        "El alquiler aumentar√° autom√°ticamente 25% cada a√±o sin posibilidad de negociaci√≥n",
        "El dep√≥sito no ser√° devuelto bajo ninguna circunstancia al finalizar el contrato",
        "La propietaria puede cambiar las condiciones del contrato en cualquier momento"
    ]
    
    enhancer = EnhancedExecutiveSummaryService()
    
    print("üîç AN√ÅLISIS DE CL√ÅUSULAS ESPEC√çFICAS:")
    
    for i, clause in enumerate(test_clauses, 1):
        print(f"\nüìã Cl√°usula {i}: {clause[:80]}...")
        
        # Buscar art√≠culo aplicable
        llm_rag = LLMBasedRAGService()
        relevant_articles = llm_rag.search_articles_with_llm(clause, tema_filter="alquileres", max_results=1)
        
        if relevant_articles:
            article = relevant_articles[0]
            application = enhancer._generate_article_application(clause, article)
            
            print(f"  üìö Art√≠culo aplicable: {article['ley_asociada']} Art. {article['articulo']}")
            print(f"  üìù Aplicaci√≥n legal: {application}")
            print(f"  üéØ Similitud: {article['similarity_score']:.3f}")
        else:
            print("  ‚ö†Ô∏è No se encontraron art√≠culos espec√≠ficos aplicables")


def main():
    """Funci√≥n principal del test"""
    try:
        # Verificar que tenemos art√≠culos cargados
        article_count = LegalArticle.objects.filter(is_active=True).count()
        if article_count == 0:
            print("‚ùå ERROR: No hay art√≠culos legales cargados en la base RAG.")
            return
        
        print(f"üìö Art√≠culos disponibles en RAG: {article_count}")
        
        # Ejecutar test principal
        metrics = test_contract_enhancement()
        
        # Test comparativo adicional
        run_comparison_test()
        
        print(f"\nüéâ TESTS COMPLETADOS EXITOSAMENTE")
        print("=" * 40)
        
        print("üìä RESUMEN FINAL:")
        print(f"  ‚Ä¢ Sistema RAG comparativo integrado correctamente")
        print(f"  ‚Ä¢ RAG Local: {metrics['local_metrics']['referencias_legales']} referencias legales (+{metrics['local_metrics']['porcentaje_incremento']:.1f}%)")
        print(f"  ‚Ä¢ RAG LLM: {metrics['llm_metrics']['referencias_legales']} referencias legales (+{metrics['llm_metrics']['porcentaje_incremento']:.1f}%)")
        print(f"  ‚Ä¢ Similitud entre m√©todos: {metrics['comparison']['similarity_score']:.2f}")
        print(f"  ‚Ä¢ Art√≠culos √∫nicos encontrados por LLM: {len(metrics['comparison']['llm_only'])}")
        
    except Exception as e:
        print(f"‚ùå ERROR EN TEST: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()