#!/usr/bin/env python
"""
Test de an√°lisis de contrato real de alquiler con cl√°usulas espec√≠ficas
Prueba la integraci√≥n RAG + ML con cl√°usulas reales dominicanas
"""

import os
import sys
import django
from typing import List, Dict

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from ml_analysis.ml_service import ContractMLService
from legal_knowledge.rag_service import rag_service
from legal_knowledge.models import LegalArticle


def analyze_real_rental_contract():
    """
    Analiza un contrato real de alquiler con 13 cl√°usulas espec√≠ficas
    """
    print("üè† AN√ÅLISIS DE CONTRATO REAL DE ALQUILER")
    print("=" * 60)
    
    # Contrato real proporcionado por el usuario
    contract_text = """
    CONTRATO DE ARRENDAMIENTO DE VIVIENDA
    
    PRIMERO: LA PROPIETARIA da en alquiler a EL INQUILINO un apartamento en el quinto nivel, ubicado en la calle Las Palmas, No. 32-A, Ensanche Naco, Santo Domingo, Distrito Nacional, con 3 habitaciones, 2 ba√±os, sala, comedor, cocina, √°rea de lavado y balc√≥n. EL INQUILINO no podr√° ceder ni subarrendar el inmueble sin el consentimiento por escrito de LA PROPIETARIA.
    
    SEGUNDO: LA PROPIETARIA garantiza a EL INQUILINO el uso y disfrute pac√≠fico del inmueble arrendado por el tiempo del presente contrato.
    
    TERCERO: EL INQUILINO queda obligado a mantener el inmueble en perfectas condiciones y a entregarlo en buen estado al t√©rmino del contrato. Ser√° responsable de cualquier da√±o ocurrido durante el alquiler y de las reparaciones de instalaciones sanitarias y el√©ctricas.
    
    CUARTO: EL INQUILINO se compromete a no hacer modificaciones en el inmueble sin la previa autorizaci√≥n por escrito de LA PROPIETARIA.
    
    QUINTO: EL INQUILINO queda obligado a pagar la suma de TREINTA Y OCHO MIL PESOS DOMINICANOS (RD$38,000.00) el d√≠a 8 de cada mes sin retraso. En caso de mora, deber√° pagar un recargo del 5% sobre la suma adeudada.
    
    SEXTO: El presente contrato tendr√° una vigencia de UN (1) a√±o a partir de la fecha de firma, con opci√≥n de renovaci√≥n o rescisi√≥n mediante aviso por escrito con 60 d√≠as de anticipaci√≥n.
    
    S√âPTIMO: En caso de renovaci√≥n, el alquiler aumentar√° conforme a la tasa de inflaci√≥n oficial del Banco Central de la Rep√∫blica Dominicana o en un 10%, lo que sea mayor.
    
    OCTAVO: EL INQUILINO asumir√° el pago de los servicios de electricidad, tel√©fono, internet y cualquier otro servicio que requiera, mientras que LA PROPIETARIA cubrir√° los servicios de agua y recogida de basura.
    
    NOVENO: EL INQUILINO presenta como su FIADOR SOLIDARIO E INDIVISIBLE a la se√±ora VALERIA ESTEFAN√çA G√ìMEZ MART√çNEZ, dominicana, mayor de edad, contadora, portadora de la c√©dula de identidad y electoral No. 120-6543210-7, domiciliada en Santo Domingo, Distrito Nacional, quien asume ser codeudora en caso de incumplimiento de EL INQUILINO.
    
    D√âCIMO: EL INQUILINO se obliga a entregar el inmueble en perfecto estado al t√©rmino del contrato y a cancelar cualquier contrato de servicios asociados antes de su salida.
    
    D√âCIMO PRIMERO: En caso de que EL INQUILINO rescinda el contrato antes de su vencimiento, deber√° pagar los alquileres vencidos y una penalidad de un mes de renta.
    
    D√âCIMO SEGUNDO: Todas las condiciones del presente contrato son esenciales y su incumplimiento dar√° lugar a su resoluci√≥n inmediata.
    
    D√âCIMO TERCERO: Las partes se someten a la jurisdicci√≥n de los tribunales de Santo Domingo, Distrito Nacional, para la resoluci√≥n de cualquier disputa.
    """
    
    print("üìÑ INFORMACI√ìN DEL CONTRATO:")
    print("  ‚Ä¢ Tipo: Arrendamiento de vivienda")
    print("  ‚Ä¢ Ubicaci√≥n: Ensanche Naco, Santo Domingo")
    print("  ‚Ä¢ Renta: RD$38,000.00 mensuales")
    print("  ‚Ä¢ Duraci√≥n: 1 a√±o")
    print("  ‚Ä¢ Total cl√°usulas: 13")
    print()
    
    # 1. An√°lisis con ML tradicional
    print("ü§ñ AN√ÅLISIS ML TRADICIONAL:")
    print("-" * 30)
    
    ml_service = ContractMLService()
    traditional_analysis = ml_service.analyze_contract(contract_text)
    
    print(f"  ‚Ä¢ Total cl√°usulas detectadas: {traditional_analysis['total_clauses']}")
    print(f"  ‚Ä¢ Cl√°usulas abusivas: {traditional_analysis['abusive_clauses_count']}")
    print(f"  ‚Ä¢ Risk Score: {traditional_analysis['risk_score']:.3f}")
    print(f"  ‚Ä¢ Tiempo de procesamiento: {traditional_analysis['processing_time']:.2f}s")
    
    # 2. B√∫squeda RAG de art√≠culos relevantes
    print("\nüîç B√öSQUEDA RAG DE ART√çCULOS RELEVANTES:")
    print("-" * 40)
    
    # B√∫squedas espec√≠ficas basadas en el contrato
    search_terms = [
        "arrendamiento alquiler",
        "obligaciones inquilino",
        "renta pago mensual", 
        "rescisi√≥n contrato",
        "fiador solidario"
    ]
    
    all_relevant_articles = []
    for term in search_terms:
        print(f"\nüîé B√∫squeda: '{term}'")
        results = rag_service.search_articles(term, tema_filter="alquileres", max_results=2)
        for result in results:
            print(f"  ‚Ä¢ Art. {result['articulo']} - Score: {result['similarity_score']:.3f}")
            print(f"    {result['contenido'][:100]}...")
        all_relevant_articles.extend(results)
    
    # 3. An√°lisis detallado de cl√°usulas espec√≠ficas
    print("\nüìã AN√ÅLISIS DETALLADO DE CL√ÅUSULAS:")
    print("-" * 35)
    
    # Cl√°usulas espec√≠ficas para analizar
    specific_clauses = [
        {
            "numero": "S√âPTIMO",
            "texto": "En caso de renovaci√≥n, el alquiler aumentar√° conforme a la tasa de inflaci√≥n oficial del Banco Central de la Rep√∫blica Dominicana o en un 10%, lo que sea mayor.",
            "tipo": "aumento_renta"
        },
        {
            "numero": "D√âCIMO PRIMERO", 
            "texto": "En caso de que EL INQUILINO rescinda el contrato antes de su vencimiento, deber√° pagar los alquileres vencidos y una penalidad de un mes de renta.",
            "tipo": "penalidad_rescision"
        },
        {
            "numero": "TERCERO",
            "texto": "Ser√° responsable de cualquier da√±o ocurrido durante el alquiler y de las reparaciones de instalaciones sanitarias y el√©ctricas.",
            "tipo": "responsabilidad_danos"
        }
    ]
    
    for clause in specific_clauses:
        print(f"\nüîç An√°lisis cl√°usula {clause['numero']} ({clause['tipo']}):")
        
        # Buscar art√≠culos espec√≠ficos para esta cl√°usula
        clause_articles = rag_service.search_articles(
            clause['texto'], 
            tema_filter="alquileres", 
            max_results=2
        )
        
        print(f"üìú Cl√°usula: {clause['texto'][:80]}...")
        print(f"üìö Art√≠culos relacionados encontrados: {len(clause_articles)}")
        
        for article in clause_articles:
            print(f"  ‚Ä¢ {article['ley_asociada']} Art. {article['articulo']}")
            print(f"    Relevancia: {article['similarity_score']:.3f}")
            print(f"    Contenido: {article['contenido'][:120]}...")
    
    # 4. Generar an√°lisis legal con contexto RAG
    print("\n‚öñÔ∏è AN√ÅLISIS LEGAL CON CONTEXTO RAG:")
    print("-" * 35)
    
    # Usar art√≠culos √∫nicos encontrados
    unique_articles = []
    seen_ids = set()
    for article in all_relevant_articles:
        if article['id'] not in seen_ids:
            unique_articles.append(article)
            seen_ids.add(article['id'])
    
    print(f"üìñ Total art√≠culos √∫nicos encontrados: {len(unique_articles)}")
    
    # Crear contexto legal
    legal_context = ""
    for article in unique_articles[:5]:  # Top 5 art√≠culos
        legal_context += f"**Art√≠culo {article['articulo']} ({article['ley_asociada']})**\n"
        legal_context += f"{article['contenido']}\n\n"
    
    print("üìã Contexto legal generado:")
    print(legal_context[:300] + "...")
    
    # 5. Evaluaci√≥n final
    print("\nüìä EVALUACI√ìN FINAL DEL CONTRATO:")
    print("-" * 30)
    
    # Identificar cl√°usulas potencialmente problem√°ticas
    problematic_clauses = []
    
    # An√°lisis de la cl√°usula del 10% de aumento
    if "10%" in contract_text and "inflaci√≥n" in contract_text:
        problematic_clauses.append({
            "clause": "S√âPTIMO - Aumento autom√°tico del 10%",
            "issue": "Aumento fijo que podr√≠a exceder la inflaci√≥n real",
            "relevant_article": "Art. 1711 - Precio de arrendamiento"
        })
    
    # An√°lisis de penalidad por rescisi√≥n
    if "penalidad" in contract_text and "mes de renta" in contract_text:
        problematic_clauses.append({
            "clause": "D√âCIMO PRIMERO - Penalidad por rescisi√≥n",
            "issue": "Penalidad que podr√≠a ser excesiva",
            "relevant_article": "Art. 1728 - Obligaciones del arrendatario"
        })
    
    # Responsabilidad por reparaciones
    if "reparaciones" in contract_text and "sanitarias y el√©ctricas" in contract_text:
        problematic_clauses.append({
            "clause": "TERCERO - Responsabilidad por reparaciones",
            "issue": "Responsabilidad amplia del inquilino por reparaciones",
            "relevant_article": "Art. 1709-1710 - Obligaciones en arrendamiento"
        })
    
    print(f"‚ö†Ô∏è  Cl√°usulas potencialmente problem√°ticas: {len(problematic_clauses)}")
    for i, clause in enumerate(problematic_clauses, 1):
        print(f"\n{i}. {clause['clause']}")
        print(f"   Problema: {clause['issue']}")
        print(f"   Art√≠culo relevante: {clause['relevant_article']}")
    
    # 6. Recomendaciones basadas en RAG
    print("\nüí° RECOMENDACIONES BASADAS EN C√ìDIGO CIVIL:")
    print("-" * 40)
    
    recommendations = [
        "Revisar la cl√°usula de aumento autom√°tico del 10% conforme al art√≠culo 1711",
        "Evaluar la proporcionalidad de la penalidad por rescisi√≥n seg√∫n el art√≠culo 1728", 
        "Verificar el equilibrio en las obligaciones de reparaci√≥n seg√∫n art√≠culos 1709-1710",
        "Considerar la claridad en la definici√≥n de responsabilidades seg√∫n el art√≠culo 1708"
    ]
    
    for i, rec in enumerate(recommendations, 1):
        print(f"{i}. {rec}")
    
    print(f"\n‚úÖ AN√ÅLISIS COMPLETADO")
    print(f"üìä Resumen: {len(problematic_clauses)} cl√°usulas requieren atenci√≥n especial")
    
    return {
        'traditional_analysis': traditional_analysis,
        'relevant_articles': unique_articles,
        'problematic_clauses': problematic_clauses,
        'recommendations': recommendations
    }


def test_individual_clauses():
    """
    Test adicional para analizar cl√°usulas individuales
    """
    print("\nüî¨ TEST DE CL√ÅUSULAS INDIVIDUALES:")
    print("=" * 40)
    
    # Cl√°usulas espec√≠ficas con etiquetas del usuario (1 = v√°lida seg√∫n el usuario)
    clauses_data = [
        ("PRIMERO", "EL INQUILINO no podr√° ceder ni subarrendar el inmueble sin el consentimiento por escrito de LA PROPIETARIA.", 1),
        ("S√âPTIMO", "En caso de renovaci√≥n, el alquiler aumentar√° conforme a la tasa de inflaci√≥n oficial del Banco Central de la Rep√∫blica Dominicana o en un 10%, lo que sea mayor.", 1),
        ("D√âCIMO PRIMERO", "En caso de que EL INQUILINO rescinda el contrato antes de su vencimiento, deber√° pagar los alquileres vencidos y una penalidad de un mes de renta.", 1),
    ]
    
    ml_service = ContractMLService()
    
    for clause_num, clause_text, user_label in clauses_data:
        print(f"\nüìú Cl√°usula {clause_num}:")
        print(f"Texto: {clause_text[:100]}...")
        print(f"Etiqueta usuario: {'V√°lida' if user_label == 1 else 'Abusiva'}")
        
        # An√°lisis ML de la cl√°usula individual
        ml_prediction = ml_service.classifier_pipeline.predict([clause_text])[0]
        ml_probability = ml_service.classifier_pipeline.predict_proba([clause_text])[0]
        
        print(f"Predicci√≥n ML: {'Abusiva' if ml_prediction == 1 else 'V√°lida'}")
        print(f"Probabilidad abusiva: {ml_probability[1]:.3f}")
        
        # B√∫squeda RAG para contexto
        rag_results = rag_service.search_articles(clause_text, tema_filter="alquileres", max_results=1)
        if rag_results:
            article = rag_results[0]
            print(f"Art√≠culo relevante: {article['ley_asociada']} Art. {article['articulo']}")
            print(f"Similitud: {article['similarity_score']:.3f}")


def main():
    """Funci√≥n principal"""
    try:
        # Verificar que tenemos art√≠culos cargados
        article_count = LegalArticle.objects.filter(is_active=True).count()
        if article_count == 0:
            print("‚ùå ERROR: No hay art√≠culos legales cargados.")
            return
        
        print(f"üìö Art√≠culos disponibles en la base legal: {article_count}")
        
        # Ejecutar an√°lisis completo
        results = analyze_real_rental_contract()
        
        # Test de cl√°usulas individuales
        test_individual_clauses()
        
        print("\nüéâ AN√ÅLISIS COMPLETO FINALIZADO")
        
        # Estad√≠sticas finales
        stats = rag_service.get_statistics()
        print(f"\nüìä ESTAD√çSTICAS FINALES:")
        print(f"  ‚Ä¢ B√∫squedas RAG realizadas: {stats.get('total_searches', 0)}")
        print(f"  ‚Ä¢ Art√≠culos sobre alquileres: {stats.get('temas', {}).get('alquileres', 0)}")
        
    except Exception as e:
        print(f"‚ùå ERROR EN AN√ÅLISIS: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()