#!/usr/bin/env python
"""
Test de integraci√≥n entre el sistema RAG y ml_service.py
Prueba c√≥mo el an√°lisis de contratos puede usar referencias del C√≥digo Civil
"""

import os
import sys
import django
from typing import List, Dict

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from ml_analysis.ml_service import ContractMLService
from legal_knowledge.rag_service import rag_service
from legal_knowledge.models import LegalArticle


class EnhancedContractMLService(ContractMLService):
    """
    Versi√≥n mejorada del ContractMLService que integra el sistema RAG
    para generar an√°lisis legales m√°s fundamentados
    """
    
    def __init__(self):
        super().__init__()
        self.rag_service = rag_service
    
    def _generate_legal_analysis_with_rag(self, contract_text: str, abusive_clauses: List[str]) -> Dict[str, str]:
        """
        Genera an√°lisis legal usando RAG para encontrar art√≠culos relevantes del C√≥digo Civil
        """
        if not contract_text:
            return self._get_legal_analysis_fallback()

        print("üîç Iniciando an√°lisis legal con RAG...")
        
        # 1. Detectar tipo de contrato
        contract_type = self._detect_contract_type(contract_text)
        print(f"üìã Tipo de contrato detectado: {contract_type}")
        
        # 2. Buscar art√≠culos relevantes usando RAG
        relevant_articles = self._find_relevant_articles_rag(contract_text, contract_type, abusive_clauses)
        
        # 3. Generar an√°lisis con contexto legal
        legal_analysis = self._generate_analysis_with_legal_context(
            contract_text, abusive_clauses, relevant_articles, contract_type
        )
        
        return legal_analysis
    
    def _find_relevant_articles_rag(self, contract_text: str, contract_type: str, abusive_clauses: List[str]) -> List[Dict]:
        """
        Usa el sistema RAG para encontrar art√≠culos relevantes
        """
        print("üîç Buscando art√≠culos relevantes con RAG...")
        
        # Mapear tipos de contrato a temas RAG
        contract_to_tema = {
            'arrendamiento': 'alquileres',
            'alquiler': 'alquileres', 
            'compraventa': 'compraventa',
            'venta': 'compraventa',
            'general': 'contratos_generales'
        }
        
        tema_filter = contract_to_tema.get(contract_type, 'contratos_generales')
        
        # Buscar art√≠culos por tipo de contrato
        tema_articles = self.rag_service.get_articles_by_tema(tema_filter, max_results=5)
        print(f"üìö Encontrados {len(tema_articles)} art√≠culos por tema '{tema_filter}'")
        
        # Buscar art√≠culos espec√≠ficos para cl√°usulas abusivas
        abusive_articles = []
        if abusive_clauses:
            for clause in abusive_clauses[:3]:  # Limitar a 3 cl√°usulas m√°s importantes
                clause_articles = self.rag_service.search_articles(
                    clause, tema_filter=tema_filter, max_results=2
                )
                abusive_articles.extend(clause_articles)
        
        # Combinar y eliminar duplicados
        all_articles = tema_articles + abusive_articles
        seen_ids = set()
        unique_articles = []
        for article in all_articles:
            if article['id'] not in seen_ids:
                unique_articles.append(article)
                seen_ids.add(article['id'])
        
        print(f"üìñ Total art√≠culos √∫nicos encontrados: {len(unique_articles)}")
        return unique_articles[:6]  # M√°ximo 6 art√≠culos para no sobrecargar
    
    def _generate_analysis_with_legal_context(
        self, 
        contract_text: str, 
        abusive_clauses: List[str], 
        relevant_articles: List[Dict],
        contract_type: str
    ) -> Dict[str, str]:
        """
        Genera an√°lisis legal usando el contexto de art√≠culos encontrados
        """
        if not relevant_articles:
            print("‚ö†Ô∏è No se encontraron art√≠culos relevantes, usando an√°lisis b√°sico")
            return self._get_legal_analysis_fallback(contract_type)
        
        # Crear contexto legal para el LLM
        legal_context = self._build_legal_context(relevant_articles)
        
        # Construir prompt enriquecido con referencias legales
        abusive_context = ""
        if abusive_clauses:
            abusive_context = f"""
        Cl√°usulas identificadas como problem√°ticas:
        {chr(10).join([f"- {clause}" for clause in abusive_clauses])}
        """
        
        prompt = f"""
        Act√∫a como un abogado experto en la legislaci√≥n de Rep√∫blica Dominicana. 
        Analiza el siguiente contrato usando ESPEC√çFICAMENTE los art√≠culos del C√≥digo Civil proporcionados.
        
        --- CONTRATO ---
        {contract_text[:2000]}
        
        {abusive_context}
        
        --- ART√çCULOS RELEVANTES DEL C√ìDIGO CIVIL ---
        {legal_context}
        
        IMPORTANTE: Bas√°ndote ESPEC√çFICAMENTE en los art√≠culos proporcionados, proporciona tu an√°lisis en formato JSON:
        
        {{
          "executive_summary": "Resumen ejecutivo legal que CITE ESPEC√çFICAMENTE los art√≠culos relevantes (ej: 'Seg√∫n el art√≠culo 1708...', 'De acuerdo al art√≠culo 1583...')",
          "affected_laws": ["Lista de art√≠culos espec√≠ficos citados con formato: 'C√≥digo Civil Art. X - Ley Y'"]
        }}
        
        El resumen DEBE incluir referencias espec√≠ficas a los art√≠culos proporcionados.
        """
        
        system_message = """Eres un abogado experto en derecho civil dominicano. 
        DEBES citar espec√≠ficamente los art√≠culos del C√≥digo Civil proporcionados en tu an√°lisis.
        Tu respuesta debe ser siempre un objeto JSON v√°lido."""
        
        try:
            print("ü§ñ Generando an√°lisis con contexto legal...")
            analysis = self._call_llm_api_with_validation(prompt, system_message)
            
            # Validar que el an√°lisis incluya referencias a art√≠culos
            validated_analysis = self._validate_legal_analysis_with_rag(analysis, relevant_articles)
            
            return {
                'executive_summary': validated_analysis.get('executive_summary', 'No se pudo generar el resumen legal.'),
                'affected_laws': validated_analysis.get('affected_laws', [])
            }
        except Exception as e:
            print(f"‚ùå Error generando an√°lisis con LLM: {e}")
            return self._generate_fallback_with_articles(relevant_articles, contract_type)
    
    def _build_legal_context(self, articles: List[Dict]) -> str:
        """
        Construye el contexto legal a partir de los art√≠culos encontrados
        """
        context_parts = []
        for article in articles:
            context_parts.append(
                f"**Art√≠culo {article['articulo']} ({article['ley_asociada']})**\n"
                f"{article['contenido']}\n"
                f"[Tema: {article['tema']}, Relevancia: {article['relevance_score']:.2f}]"
            )
        
        return "\n\n".join(context_parts)
    
    def _validate_legal_analysis_with_rag(self, analysis: Dict, articles: List[Dict]) -> Dict:
        """
        Valida que el an√°lisis incluya referencias a los art√≠culos proporcionados
        """
        executive_summary = analysis.get('executive_summary', '')
        affected_laws = analysis.get('affected_laws', [])
        
        # Si el resumen no incluye referencias espec√≠ficas, agregarlas
        if not any(art['articulo'] in str(executive_summary) for art in articles):
            # Agregar referencias autom√°ticamente
            article_refs = [f"art√≠culo {art['articulo']}" for art in articles[:3]]
            enhanced_summary = f"{executive_summary} Este an√°lisis se basa en los {', '.join(article_refs)} del C√≥digo Civil Dominicano."
            executive_summary = enhanced_summary
        
        # Asegurar que affected_laws incluya los art√≠culos encontrados
        if not affected_laws or len(affected_laws) == 0:
            affected_laws = [
                f"C√≥digo Civil Art. {art['articulo']} - {art['ley_asociada']}"
                for art in articles[:5]
            ]
        
        return {
            'executive_summary': executive_summary,
            'affected_laws': affected_laws
        }
    
    def _generate_fallback_with_articles(self, articles: List[Dict], contract_type: str) -> Dict[str, str]:
        """
        Genera an√°lisis de respaldo usando los art√≠culos encontrados
        """
        if not articles:
            return self._get_legal_analysis_fallback(contract_type)
        
        # Crear resumen basado en art√≠culos encontrados
        article_refs = [f"art√≠culo {art['articulo']}" for art in articles[:3]]
        summary = f"Este contrato de {contract_type} debe analizarse considerando los {', '.join(article_refs)} del C√≥digo Civil Dominicano. "
        
        if any('abusiv' in art['contenido'].lower() for art in articles):
            summary += "Se han identificado aspectos que requieren atenci√≥n legal especial. "
        
        summary += "Se recomienda revisi√≥n detallada para asegurar cumplimiento normativo."
        
        affected_laws = [
            f"C√≥digo Civil Art. {art['articulo']} - {art['ley_asociada']}"
            for art in articles
        ]
        
        return {
            'executive_summary': summary,
            'affected_laws': affected_laws
        }


def test_rag_ml_integration():
    """
    Test principal que demuestra la integraci√≥n RAG + ML
    """
    print("üöÄ INICIANDO TEST DE INTEGRACI√ìN RAG + ML")
    print("=" * 60)
    
    # Contrato de prueba (alquiler con cl√°usulas abusivas)
    contract_text = """
    CONTRATO DE ARRENDAMIENTO
    
    PRIMERO: La Propietaria alquila al Inquilino un local comercial ubicado en 
    la Av. Abraham Lincoln No. 15, Santo Domingo. El local ser√° usado para 
    actividades comerciales, pero la propietaria se reserva el derecho de 
    cambiar su uso sin previo aviso.
    
    SEGUNDO: El Inquilino acepta hacerse responsable de cualquier multa impuesta 
    por el incumplimiento de regulaciones que sean ajenas a su operaci√≥n.
    
    TERCERO: El contrato se prorroga autom√°ticamente cada a√±o con un aumento 
    de 25% en el alquiler, sin opci√≥n de renegociaci√≥n.
    
    CUARTO: El precio del alquiler es de RD$50,000.00 mensuales, pagaderos 
    por adelantado el d√≠a 1 de cada mes.
    
    QUINTO: El dep√≥sito de garant√≠a de RD$100,000.00 no podr√° ser utilizado 
    para cubrir alquileres pendientes.
    """
    
    print("üìÑ CONTRATO DE PRUEBA:")
    print(contract_text[:300] + "...\n")
    
    # Inicializar servicio mejorado
    enhanced_service = EnhancedContractMLService()
    
    print("üîç INICIANDO AN√ÅLISIS CON RAG INTEGRADO...")
    print("-" * 40)
    
    # Simular cl√°usulas abusivas detectadas por el ML
    abusive_clauses = [
        "La propietaria se reserva el derecho de cambiar su uso sin previo aviso",
        "El Inquilino acepta hacerse responsable de cualquier multa impuesta por el incumplimiento de regulaciones que sean ajenas a su operaci√≥n",
        "El contrato se prorroga autom√°ticamente cada a√±o con un aumento de 25% en el alquiler, sin opci√≥n de renegociaci√≥n"
    ]
    
    # Ejecutar an√°lisis legal mejorado
    legal_analysis = enhanced_service._generate_legal_analysis_with_rag(
        contract_text, abusive_clauses
    )
    
    print("\nüìã RESULTADOS DEL AN√ÅLISIS:")
    print("=" * 40)
    print("üìù RESUMEN EJECUTIVO:")
    print(legal_analysis['executive_summary'])
    print()
    print("‚öñÔ∏è LEYES AFECTADAS:")
    for law in legal_analysis['affected_laws']:
        print(f"  ‚Ä¢ {law}")
    
    print("\n‚úÖ TEST COMPLETADO EXITOSAMENTE")
    return legal_analysis


def test_rag_search_functionality():
    """
    Test adicional para verificar funcionalidad RAG
    """
    print("\nüîç TEST ADICIONAL: FUNCIONALIDAD RAG")
    print("=" * 40)
    
    # Test b√∫squedas espec√≠ficas
    test_queries = [
        ("arrendamiento", "alquileres"),
        ("venta propiedad", "compraventa"), 
        ("contrato obligaciones", "contratos_generales")
    ]
    
    for query, tema in test_queries:
        print(f"\nüîé B√∫squeda: '{query}' (tema: {tema})")
        results = rag_service.search_articles(query, tema_filter=tema, max_results=2)
        
        for i, result in enumerate(results, 1):
            print(f"  {i}. Art. {result['articulo']} - {result['ley_asociada']}")
            print(f"     Score: {result['similarity_score']:.3f}")
            print(f"     {result['contenido'][:80]}...")


def main():
    """Funci√≥n principal del test"""
    try:
        # Verificar que tenemos art√≠culos cargados
        article_count = LegalArticle.objects.filter(is_active=True).count()
        if article_count == 0:
            print("‚ùå ERROR: No hay art√≠culos legales cargados.")
            print("Ejecuta: python manage.py load_legal_articles")
            return
        
        print(f"üìö Art√≠culos disponibles: {article_count}")
        
        # Ejecutar tests
        legal_analysis = test_rag_ml_integration()
        test_rag_search_functionality()
        
        print("\nüéâ TODOS LOS TESTS COMPLETADOS EXITOSAMENTE")
        
        # Mostrar estad√≠sticas finales
        stats = rag_service.get_statistics()
        print(f"\nüìä ESTAD√çSTICAS FINALES:")
        print(f"  ‚Ä¢ Total art√≠culos: {stats.get('total_articles', 0)}")
        print(f"  ‚Ä¢ Temas disponibles: {list(stats.get('temas', {}).keys())}")
        print(f"  ‚Ä¢ B√∫squedas realizadas: {stats.get('total_searches', 0)}")
        
    except Exception as e:
        print(f"‚ùå ERROR EN TEST: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()