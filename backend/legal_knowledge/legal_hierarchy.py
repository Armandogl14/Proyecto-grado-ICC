"""
Sistema de Jerarqu√≠a Legal para RAG - Rep√∫blica Dominicana
==========================================================

Este m√≥dulo define la jerarqu√≠a normativa dominicana y proporciona
m√©todos para priorizar art√≠culos legales seg√∫n su rango normativo.
"""

from typing import Dict, List, Tuple
import logging

logger = logging.getLogger('legal_knowledge')


class DominicanLegalHierarchy:
    """
    Sistema de jerarqu√≠a legal basado en el ordenamiento jur√≠dico dominicano.
    
    Jerarqu√≠a (de mayor a menor rango):
    1. Constituci√≥n de la Rep√∫blica
    2. Leyes Org√°nicas
    3. Leyes Ordinarias (incluye c√≥digos especializados)
    4. Decretos con Fuerza de Ley
    5. Decretos
    6. Reglamentos
    7. Resoluciones
    """
    
    # Definir jerarqu√≠a con scores (mayor score = mayor prioridad)
    HIERARCHY_SCORES = {
        'constitucion': 1000,
        'ley_organica': 900,
        'ley_ordinaria': 800,
        'codigo_especializado': 750,  # C√≥digos espec√≠ficos (Penal, Trabajo, etc.)
        'codigo_civil': 700,          # C√≥digo Civil (base civil)
        'decreto_ley': 600,
        'decreto': 500,
        'reglamento': 400,
        'resolucion': 300,
        'otro': 100
    }
    
    # Mapeo de leyes espec√≠ficas a sus categor√≠as
    LAW_CATEGORIES = {
        # Leyes Ordinarias Especializadas (alta prioridad)
        'Ley 108-05': 'ley_ordinaria',           # Control de Alquileres
        'Ley 4314': 'ley_ordinaria',             # Protecci√≥n al Inquilino
        'Ley 834': 'ley_ordinaria',              # Ley de Condominios
        'Ley 189-11': 'ley_ordinaria',           # Desarrollo del Mercado Hipotecario
        
        # C√≥digos Especializados
        'C√≥digo Penal': 'codigo_especializado',
        'C√≥digo de Trabajo': 'codigo_especializado',
        'C√≥digo Tributario': 'codigo_especializado',
        'C√≥digo de Comercio': 'codigo_especializado',
        
        # C√≥digo Civil (base general)
        'C√≥digo Civil': 'codigo_civil',
        'Codigo Civil': 'codigo_civil',  # Variante ortogr√°fica
        
        # Decretos
        'Decreto 4807-1959': 'decreto',
        'Decreto No. 4807': 'decreto',
        'Decreto 4807': 'decreto',
        
        # Otros formatos comunes
        'Ley No. 108-05': 'ley_ordinaria',
        'Ley N√∫m. 4314': 'ley_ordinaria',
    }
    
    @classmethod
    def get_hierarchy_score(cls, ley_asociada: str) -> int:
        """
        Obtiene el score de jerarqu√≠a para una ley espec√≠fica.
        
        Args:
            ley_asociada: Nombre de la ley (ej: "Ley 108-05", "C√≥digo Civil")
            
        Returns:
            Score de jerarqu√≠a (mayor = m√°s importante)
        """
        # Normalizar el texto
        ley_clean = ley_asociada.strip()
        
        # Buscar coincidencia exacta
        if ley_clean in cls.LAW_CATEGORIES:
            category = cls.LAW_CATEGORIES[ley_clean]
            return cls.HIERARCHY_SCORES[category]
        
        # Buscar coincidencias parciales
        ley_lower = ley_clean.lower()
        
        if 'ley 108-05' in ley_lower or 'control de alquileres' in ley_lower:
            return cls.HIERARCHY_SCORES['ley_ordinaria']
        elif 'ley 4314' in ley_lower:
            return cls.HIERARCHY_SCORES['ley_ordinaria']
        elif 'c√≥digo civil' in ley_lower or 'codigo civil' in ley_lower:
            return cls.HIERARCHY_SCORES['codigo_civil']
        elif 'decreto 4807' in ley_lower:
            return cls.HIERARCHY_SCORES['decreto']
        elif 'c√≥digo' in ley_lower or 'codigo' in ley_lower:
            return cls.HIERARCHY_SCORES['codigo_especializado']
        elif 'ley' in ley_lower and ('no.' in ley_lower or 'n√∫m.' in ley_lower):
            return cls.HIERARCHY_SCORES['ley_ordinaria']
        elif 'decreto' in ley_lower:
            return cls.HIERARCHY_SCORES['decreto']
        elif 'reglamento' in ley_lower:
            return cls.HIERARCHY_SCORES['reglamento']
        
        # Por defecto
        return cls.HIERARCHY_SCORES['otro']
    
    @classmethod
    def sort_articles_by_hierarchy(cls, articles: List[Dict]) -> List[Dict]:
        """
        Ordena art√≠culos por jerarqu√≠a legal (mayor rango primero).
        
        Args:
            articles: Lista de art√≠culos con campo 'ley_asociada'
            
        Returns:
            Lista ordenada por jerarqu√≠a legal
        """
        def hierarchy_key(article):
            hierarchy_score = cls.get_hierarchy_score(article.get('ley_asociada', ''))
            relevance_score = article.get('relevance_score', 0.5)
            similarity_score = article.get('similarity_score', 0.5)
            
            # Combinar jerarqu√≠a con relevancia (jerarqu√≠a tiene m√°s peso)
            combined_score = (hierarchy_score * 0.6) + (relevance_score * 0.2) + (similarity_score * 0.2)
            return combined_score
        
        return sorted(articles, key=hierarchy_key, reverse=True)
    
    @classmethod
    def get_legal_category_name(cls, ley_asociada: str) -> str:
        """
        Obtiene el nombre de la categor√≠a legal para una ley.
        
        Args:
            ley_asociada: Nombre de la ley
            
        Returns:
            Nombre legible de la categor√≠a
        """
        score = cls.get_hierarchy_score(ley_asociada)
        
        for category, cat_score in cls.HIERARCHY_SCORES.items():
            if score == cat_score:
                return {
                    'constitucion': 'Constituci√≥n',
                    'ley_organica': 'Ley Org√°nica',
                    'ley_ordinaria': 'Ley Ordinaria',
                    'codigo_especializado': 'C√≥digo Especializado',
                    'codigo_civil': 'C√≥digo Civil',
                    'decreto_ley': 'Decreto-Ley',
                    'decreto': 'Decreto',
                    'reglamento': 'Reglamento',
                    'resolucion': 'Resoluci√≥n',
                    'otro': 'Otra Norma'
                }.get(category, 'Desconocido')
        
        return 'Desconocido'
    
    @classmethod
    def get_hierarchy_explanation(cls) -> str:
        """
        Obtiene una explicaci√≥n de la jerarqu√≠a legal dominicana.
        
        Returns:
            Texto explicativo de la jerarqu√≠a
        """
        return """
        JERARQU√çA LEGAL DOMINICANA (Art. 6 Constituci√≥n):
        
        1. üèõÔ∏è CONSTITUCI√ìN - Norma suprema
        2. ‚öñÔ∏è LEYES ORG√ÅNICAS - Desarrollo constitucional
        3. üìú LEYES ORDINARIAS - Legislaci√≥n especializada
           ‚Ä¢ Ley 108-05 (Control de Alquileres)
           ‚Ä¢ Ley 4314 (Protecci√≥n al Inquilino)
        4. üìö C√ìDIGOS ESPECIALIZADOS - Materias espec√≠ficas
        5. üìñ C√ìDIGO CIVIL - Base del derecho civil
        6. üìã DECRETOS - Poder ejecutivo
        7. üìÑ REGLAMENTOS - Desarrollo de leyes
        8. üìù RESOLUCIONES - Autoridades administrativas
        
        PRIORIDAD RAG: Leyes espec√≠ficas > C√≥digos > Decretos
        """


def enhance_articles_with_hierarchy(articles: List[Dict]) -> List[Dict]:
    """
    Enriquece una lista de art√≠culos con informaci√≥n de jerarqu√≠a legal.
    
    Args:
        articles: Lista de art√≠culos legales
        
    Returns:
        Lista de art√≠culos enriquecidos con jerarqu√≠a
    """
    hierarchy = DominicanLegalHierarchy()
    
    enhanced_articles = []
    for article in articles:
        enhanced = article.copy()
        
        # Agregar informaci√≥n de jerarqu√≠a
        enhanced['hierarchy_score'] = hierarchy.get_hierarchy_score(
            article.get('ley_asociada', '')
        )
        enhanced['legal_category'] = hierarchy.get_legal_category_name(
            article.get('ley_asociada', '')
        )
        
        enhanced_articles.append(enhanced)
    
    # Ordenar por jerarqu√≠a
    return hierarchy.sort_articles_by_hierarchy(enhanced_articles)


# Funci√≥n de conveniencia para usar en RAG
def prioritize_articles_by_legal_hierarchy(articles: List[Dict], max_results: int = 3) -> List[Dict]:
    """
    Prioriza art√≠culos seg√∫n jerarqu√≠a legal dominicana.
    
    Args:
        articles: Lista de art√≠culos candidatos
        max_results: N√∫mero m√°ximo de art√≠culos a retornar
        
    Returns:
        Lista priorizada de art√≠culos (leyes espec√≠ficas primero)
    """
    if not articles:
        return []
    
    # Enriquecer con jerarqu√≠a
    enhanced = enhance_articles_with_hierarchy(articles)
    
    # Retornar los mejores seg√∫n jerarqu√≠a
    return enhanced[:max_results]


if __name__ == "__main__":
    # Test del sistema de jerarqu√≠a
    test_articles = [
        {'ley_asociada': 'C√≥digo Civil', 'relevance_score': 0.8},
        {'ley_asociada': 'Ley 108-05', 'relevance_score': 0.7},
        {'ley_asociada': 'Decreto 4807-1959', 'relevance_score': 0.9},
        {'ley_asociada': 'Ley 4314', 'relevance_score': 0.6},
    ]
    
    print("üß™ TEST DE JERARQU√çA LEGAL")
    print("=" * 40)
    
    hierarchy = DominicanLegalHierarchy()
    
    for article in test_articles:
        score = hierarchy.get_hierarchy_score(article['ley_asociada'])
        category = hierarchy.get_legal_category_name(article['ley_asociada'])
        print(f"üìö {article['ley_asociada']}: {score} ({category})")
    
    print("\nüéØ ORDEN PRIORIZADO:")
    prioritized = prioritize_articles_by_legal_hierarchy(test_articles)
    
    for i, article in enumerate(prioritized, 1):
        print(f"{i}. {article['ley_asociada']} - {article['legal_category']} "
              f"(Score: {article['hierarchy_score']})")